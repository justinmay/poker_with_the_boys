{"ast":null,"code":"var _jsxFileName = \"/Users/justinmay/Code/poker_with_the_boys/poker/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; //import Table from './components/Table';\n//import Login from './components/Login';\n\nimport AppRouter from './components/AppRouter';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Settings from './settings';\nimport { onError } from 'apollo-link-error';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink, split } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { AUTH_TOKEN } from './constants';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n/**\n * Change the uri to the server uri \n */\n\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    console.log(`GraphQLErrors:`, graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log(`NetworkErrors: ${networkError.toString()}`);\n  }\n});\nconst httpLink = new HttpLink({\n  uri: Settings.ngrok_uri\n});\nconst wsLink = new WebSocketLink({\n  uri: Settings.socket_uri,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN)\n    }\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst httpAndSubscriptionLink = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(AUTH_TOKEN);\n\n  if (token) {\n    console.log(\"found token\");\n  } else {\n    console.log(\"token not found\");\n  } // return the headers to the context so httpLink can read them\n\n\n  return {\n    headers: { ...headers,\n      authorization: token ? `${token}` : \"\"\n    }\n  };\n});\nconst link = ApolloLink.from([errorLink, authLink.concat(httpAndSubscriptionLink)]);\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link,\n  cache\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(AppRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/justinmay/Code/poker_with_the_boys/poker/src/index.tsx"],"names":["React","ReactDOM","serviceWorker","AppRouter","ApolloClient","ApolloProvider","Settings","onError","HttpLink","ApolloLink","split","setContext","InMemoryCache","AUTH_TOKEN","WebSocketLink","getMainDefinition","errorLink","graphQLErrors","networkError","console","log","toString","httpLink","uri","ngrok_uri","wsLink","socket_uri","options","reconnect","connectionParams","authToken","localStorage","getItem","httpAndSubscriptionLink","query","definition","kind","operation","authLink","_","headers","token","authorization","link","from","concat","cache","client","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n//import Table from './components/Table';\n//import Login from './components/Login';\nimport AppRouter from './components/AppRouter';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Settings from './settings';\nimport {onError} from 'apollo-link-error';\nimport {HttpLink} from 'apollo-link-http';\nimport {ApolloLink, split} from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {AUTH_TOKEN} from './constants';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n/**\n * Change the uri to the server uri \n */\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n        console.log(`GraphQLErrors:`, graphQLErrors);\n    }\n\n    if (networkError) {\n        console.log(`NetworkErrors: ${networkError.toString()}`);\n    }\n});\n\nconst httpLink = new HttpLink({\n    uri: Settings.ngrok_uri\n});\n\nconst wsLink = new WebSocketLink({\n  uri: Settings.socket_uri,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    }\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst httpAndSubscriptionLink = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(AUTH_TOKEN);\n  if (token) {\n    console.log(\"found token\") \n  } else {\n    console.log(\"token not found\");\n  }\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `${token}` : \"\",\n      \n\n    }\n  }\n});\n\nconst link: ApolloLink = ApolloLink.from([errorLink, authLink.concat(httpAndSubscriptionLink)]);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n    link,\n    cache,\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <AppRouter />\n    </React.StrictMode>\n  </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}