{"ast":null,"code":"import { gql } from 'apollo-boost';\nexport const usersQuery = gql`\n{\n  users{\n    id\n    username\n  }\n}`;\nexport const signUpQuery = gql`\n  mutation signUp($username: String!, $password: String!, $venmo: String) {\n    signUp(username: $username, password: $password, venmo: $venmo){\n      token\n    }\n  }\n`;\nexport const signInQuery = gql`\nmutation signIn($username: String!, $password: String!) {\n  signIn(username: $username, password: $password){\n    token\n  }\n}\n`;\nexport const createGameMutation = gql`\nmutation createGame($BB: Int!, $SB: Int!) {\n  createGame(\n    sBlind: $BB,\n    bBlind: $SB\n)\n}\n`;\nexport const joinGameQuery = gql`\nmutation joinGame($gameId: ID!) {\n  joinGame(\n    gameId: $gameId\n  )\n}\n`;\nexport const startGameMutation = gql`\nmutation startGame($gameId: ID!) {\n  startGame(gameId: $gameId)\n}\n`;\nexport const createPlayerQuery = gql`\nmutation createPlayer($stack: Int!, $position: Int!, $gameId: ID!) {\n  createPlayer(stack: $stack, position: $position, gameId: $gameId)\n}\n`;\nexport const getPlayerByIDQuery = gql`\nmutation player($position: Int!, $gameId: ID!) {\n  player(position: $position, gameId: $gameId) {\n    hand {\n      card1 {\n        suit\n        number\n      }\n      card2 {\n        suit\n        number\n      }\n    }\n  }\n}\n`;\nexport const subscriptionQuery = gql`\nsubscription change($gameId: ID!) {\n  change(gameId: $gameId){\n    potSize\n    dealer\n    numPlayers\n    table {\n      number\n      suit\n    }\n    state\n    action\n    curBet\n    players {\n      stack\n      user {\n        username\n      }\n      showCards {\n        card1 {\n          suit\n          number\n        }\n        card2 {\n          suit\n          number\n        }\n      }\n      position\n      isFolded\n      isAllIn\n      betAmount\n    }\n  }\n}\n`;\nexport const betMutation = gql`\nmutation bet($amount: Int!, $gameId: ID!) {\n  bet(\n    amount: $amount,\n    gameId: $gameId\n)\n}\n`;\nexport const foldMutaiton = gql`\nmutation fold($gameId: ID!) {\n  fold(\n    gameId: $gameId\n)\n}\n`;\nexport const allInMutation = gql`\nmutation allIn($gameId: ID!) {\n  allIn(\n    gameId: $gameId\n)\n}\n`;\nexport const getDataQuery = gql`\nquery getData($gameId: ID!) {\n  getData(\n    gameId: $gameId\n  )\n}\n`;\nexport const getMe = gql`\n{\n  me {\n    username\n    venmo\n  }\n}\n`;","map":{"version":3,"sources":["/Users/justinmay/Code/poker_with_the_boys/poker/src/queries.tsx"],"names":["gql","usersQuery","signUpQuery","signInQuery","createGameMutation","joinGameQuery","startGameMutation","createPlayerQuery","getPlayerByIDQuery","subscriptionQuery","betMutation","foldMutaiton","allInMutation","getDataQuery","getMe"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,UAAU,GAAGD,GAAI;;;;;;EAAvB;AAQP,OAAO,MAAME,WAAW,GAAGF,GAAI;;;;;;CAAxB;AAQP,OAAO,MAAMG,WAAW,GAAGH,GAAK;;;;;;CAAzB;AAQP,OAAO,MAAMI,kBAAkB,GAAGJ,GAAK;;;;;;;CAAhC;AASP,OAAO,MAAMK,aAAa,GAAGL,GAAK;;;;;;CAA3B;AAQP,OAAO,MAAMM,iBAAiB,GAAEN,GAAK;;;;CAA9B;AAMP,OAAO,MAAMO,iBAAiB,GAAGP,GAAI;;;;CAA9B;AAMP,OAAO,MAAMQ,kBAAkB,GAAGR,GAAI;;;;;;;;;;;;;;;CAA/B;AAiBP,OAAO,MAAMS,iBAAiB,GAAGT,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;AAqCP,OAAO,MAAMU,WAAW,GAAGV,GAAI;;;;;;;CAAxB;AASP,OAAO,MAAMW,YAAY,GAAGX,GAAI;;;;;;CAAzB;AAQP,OAAO,MAAMY,aAAa,GAAGZ,GAAI;;;;;;CAA1B;AAQP,OAAO,MAAMa,YAAY,GAAGb,GAAI;;;;;;CAAzB;AAOP,OAAO,MAAMc,KAAK,GAAGd,GAAI;;;;;;;CAAlB","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const usersQuery = gql`\n{\n  users{\n    id\n    username\n  }\n}`;\n\nexport const signUpQuery = gql`\n  mutation signUp($username: String!, $password: String!, $venmo: String) {\n    signUp(username: $username, password: $password, venmo: $venmo){\n      token\n    }\n  }\n`;\n\nexport const signInQuery = gql `\nmutation signIn($username: String!, $password: String!) {\n  signIn(username: $username, password: $password){\n    token\n  }\n}\n`;\n\nexport const createGameMutation = gql `\nmutation createGame($BB: Int!, $SB: Int!) {\n  createGame(\n    sBlind: $BB,\n    bBlind: $SB\n)\n}\n`;\n\nexport const joinGameQuery = gql `\nmutation joinGame($gameId: ID!) {\n  joinGame(\n    gameId: $gameId\n  )\n}\n`;\n\nexport const startGameMutation= gql `\nmutation startGame($gameId: ID!) {\n  startGame(gameId: $gameId)\n}\n`\n\nexport const createPlayerQuery = gql`\nmutation createPlayer($stack: Int!, $position: Int!, $gameId: ID!) {\n  createPlayer(stack: $stack, position: $position, gameId: $gameId)\n}\n`;\n\nexport const getPlayerByIDQuery = gql`\nmutation player($position: Int!, $gameId: ID!) {\n  player(position: $position, gameId: $gameId) {\n    hand {\n      card1 {\n        suit\n        number\n      }\n      card2 {\n        suit\n        number\n      }\n    }\n  }\n}\n`\n\nexport const subscriptionQuery = gql`\nsubscription change($gameId: ID!) {\n  change(gameId: $gameId){\n    potSize\n    dealer\n    numPlayers\n    table {\n      number\n      suit\n    }\n    state\n    action\n    curBet\n    players {\n      stack\n      user {\n        username\n      }\n      showCards {\n        card1 {\n          suit\n          number\n        }\n        card2 {\n          suit\n          number\n        }\n      }\n      position\n      isFolded\n      isAllIn\n      betAmount\n    }\n  }\n}\n`\n\nexport const betMutation = gql`\nmutation bet($amount: Int!, $gameId: ID!) {\n  bet(\n    amount: $amount,\n    gameId: $gameId\n)\n}\n`\n\nexport const foldMutaiton = gql`\nmutation fold($gameId: ID!) {\n  fold(\n    gameId: $gameId\n)\n}\n`\n\nexport const allInMutation = gql`\nmutation allIn($gameId: ID!) {\n  allIn(\n    gameId: $gameId\n)\n}\n`\n\nexport const getDataQuery = gql`\nquery getData($gameId: ID!) {\n  getData(\n    gameId: $gameId\n  )\n}\n`\nexport const getMe = gql`\n{\n  me {\n    username\n    venmo\n  }\n}\n`"]},"metadata":{},"sourceType":"module"}